package lofar.gui;

import java.awt.Graphics;
import java.awt.image.BufferedImage;

import lofar.Viz;
import lofar.dataFormats.DataProvider;

/**
 *
 * @author rob
 */
public class BeamFormedInnerPanel extends javax.swing.JPanel {
    private static final long serialVersionUID = 1L;
    private Viz viz;
    private DataProvider data;
    private BeamFormedFrame frame;
    private float[] foldedData;
    
    /**
     * Creates new form BeamFormedInnerPanel
     */
    public BeamFormedInnerPanel(final Viz viz, final DataProvider data, final BeamFormedFrame frame) {
        System.err.println("ctor!");
        this.viz = viz;
        this.data = data;
        this.frame = frame;
        initComponents();
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        drawProfile();
    }

    private void drawProfile() {
        System.err.println("draw profile, profile = " + foldedData);
        int height = getHeight();
        int width = getWidth();
        BufferedImage profileImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        int background = getBackground().getRGB();

        if(foldedData == null) {
            for( int y=0; y<height; y++) {
                for (int x = 0; x<width; x++) {
                    profileImage.setRGB(x, y, background);
                }
            }
            pulseProfilePanel.getGraphics().drawImage(profileImage, 0, 0, null);
            return;
        }
        
        // calc scale
        float max = -1;
        float min = Float.MAX_VALUE;
        for (int i = 0; i < foldedData.length; i++) {
            if (foldedData[i] > max) {
                max = foldedData[i];
            }
            if(foldedData[i] < min) {
                min = foldedData[i];
            }
        }

        for (int i = 0; i < foldedData.length; i++) {
            int lineHeight = (int) (((foldedData[i]-min) / (max-min)) * height);
            System.err.println("height = " + height + ", h = " + lineHeight);
            for (int y = 0; y < height - lineHeight; y++) {
                profileImage.setRGB(i, y, background);
            }
            for (int y = height - lineHeight; y < height; y++) {
                profileImage.setRGB(i, y, 0);
            }
        }

        pulseProfilePanel.getGraphics().drawImage(profileImage, 0, 0, null);
    }

    void setFoldedData(float[] data) {
        foldedData = data;
        repaint();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dedisperseCheckBox = new javax.swing.JCheckBox();
        foldingCheckBox = new javax.swing.JCheckBox();
        pulseProfilePanel = new javax.swing.JPanel();
        pulseProfileLabel = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setMaximumSize(new java.awt.Dimension(400, 300));
        setMinimumSize(new java.awt.Dimension(400, 300));

        dedisperseCheckBox.setText("dedisperse");
        dedisperseCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dedisperseCheckBoxActionPerformed(evt);
            }
        });

        foldingCheckBox.setText("show folding");
        foldingCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                foldingCheckBoxActionPerformed(evt);
            }
        });

        pulseProfilePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout pulseProfilePanelLayout = new javax.swing.GroupLayout(pulseProfilePanel);
        pulseProfilePanel.setLayout(pulseProfilePanelLayout);
        pulseProfilePanelLayout.setHorizontalGroup(
            pulseProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pulseProfilePanelLayout.setVerticalGroup(
            pulseProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 226, Short.MAX_VALUE)
        );

        pulseProfileLabel.setText("pulse profile:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pulseProfilePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pulseProfileLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(127, 127, 127))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(dedisperseCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(foldingCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(151, 151, 151)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dedisperseCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(foldingCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pulseProfileLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pulseProfilePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void dedisperseCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dedisperseCheckBoxActionPerformed
        frame.dedisperse(dedisperseCheckBox.isSelected());
    }//GEN-LAST:event_dedisperseCheckBoxActionPerformed

    private void foldingCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_foldingCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_foldingCheckBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox dedisperseCheckBox;
    private javax.swing.JCheckBox foldingCheckBox;
    private javax.swing.JLabel pulseProfileLabel;
    private javax.swing.JPanel pulseProfilePanel;
    // End of variables declaration//GEN-END:variables
}
